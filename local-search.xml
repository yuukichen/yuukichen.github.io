<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3. 基本表更新</title>
    <link href="/2024/07/05/%E5%9F%BA%E6%9C%AC%E8%A1%A8%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
    <url>/2024/07/05/%E5%9F%BA%E6%9C%AC%E8%A1%A8%E7%9A%84%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="基本表更新"><a href="#基本表更新" class="headerlink" title="基本表更新"></a>基本表更新</h2><h3 id="1-插入数据-–-INSERT-INTO"><a href="#1-插入数据-–-INSERT-INTO" class="headerlink" title="1. 插入数据 – INSERT INTO"></a>1. 插入数据 – INSERT INTO</h3><p><strong>1.1  插入元组</strong></p><p><strong>格式</strong></p><pre><code class="hljs">NSERTINTO &lt;表名&gt; [(&lt;属性列1&gt;[，&lt;属性列2 &gt;…)]VALUES (&lt;常量1&gt; [，&lt;常量2&gt;]    …           )</code></pre><p><strong>INTO子句</strong></p><ul><li>属性列的顺序可与表定义中的顺序不一致</li><li>没有指定属性列</li><li>指定部分属性列</li></ul><p><strong>VALUES子句</strong></p><ul><li>提供的值必须与INTO子句匹配</li><li>值的个数</li><li>值的类型</li></ul><p>【例】将一个新学生元组（学号：200215128；姓名：陈冬；性别：男；所在系：IS；年龄：18岁）插入到Student表中。</p><pre><code class="hljs">INSERTINTO  Student (Sno，Sname，Ssex，Sdept，Sage)VALUES (&#39;200215128&#39;，&#39;陈冬&#39;，&#39;男&#39;，&#39;IS&#39;，18)；</code></pre><p>【例】 将学生张成民的信息插入到Student表中。</p><pre><code class="hljs">INSERTINTO  StudentVALUES (&#39;200215126&#39;, &#39;张成民&#39;, &#39;男&#39;,18,&#39;CS&#39;);</code></pre><p>【例】插入一条选课记录( ‘200215128’，’1 ‘)。</p><pre><code class="hljs">INSERTINTO SC(Sno,Cno)//RDBMS将在新插入记录的Grade列上自动地赋空值VALUES (&#39;200215128&#39;,&#39;1&#39;);//等价INSERTINTO SCVALUES (&#39;200215128&#39;,&#39;1&#39;,NULL);</code></pre><p><strong>1.2  插入子查询结果</strong></p><p><strong>格式</strong></p><pre><code class="hljs">INSERTINTO &lt;表名&gt;  [(&lt;属性列1&gt; [，&lt;属性列2&gt;…  )]子查询；</code></pre><p><strong>INTO子句(与插入元组类似)</strong></p><p><strong>子查询</strong></p><ul><li>SELECT子句目标列必须与INTO子句匹配</li><li>值的个数</li><li>值的类型</li></ul><p>【例】对每一个系，求学生的平均年龄，并把结果存入数据库。</p><p>第一步：建表</p><pre><code class="hljs">CREATE  TABLE  Dept_age(Sdept  CHAR(15),       /* 系名*/Avg_age SMALLINT  /*学生平均年龄*/);</code></pre><p>第二步：插入数据</p><pre><code class="hljs">INSERT INTO  Dept_age(Sdept,Avg_age)SELECT  Sdept,AVG(Sage)FROM  StudentGROUP BY Sdept;</code></pre><h3 id="2-修改数据-–-UPDATE-SET"><a href="#2-修改数据-–-UPDATE-SET" class="headerlink" title="2. 修改数据 – UPDATE SET"></a>2. 修改数据 – UPDATE SET</h3><p>** 语句格式**</p><pre><code class="hljs">UPDATE  &lt;表名&gt;SET  &lt;列名&gt;=&lt;表达式&gt;[，&lt;列名&gt;=&lt;表达式&gt;]…[WHERE &lt;条件&gt;];</code></pre><p>** SET 子句**</p><ul><li>指定修改方式</li><li>要修改的列</li><li>修改后取值</li></ul><p><strong>WHERE子句</strong></p><ul><li>指定要修改的元组</li><li>缺省表示要修改表中的所有元组</li></ul><p>** 三种修改方式**</p><ul><li>修改某一个元组的值</li><li>修改多个元组的值</li><li>带子查询的修改语句</li></ul><p>【例】将学生201215121的年龄改为22岁。</p><pre><code class="hljs">UPDATE  StudentSET Sage=22WHERE  Sno=&#39;201215121&#39;;</code></pre><p>【例】将所有学生的年龄增加1岁。</p><pre><code class="hljs">UPDATE StudentSET Sage= Sage+1;</code></pre><p>【例】将计算机科学系全体学生的成绩置零。</p><pre><code class="hljs">UPDATE SCSET  Grade=0WHERE  &#39;CS&#39;=(            SELECT  Sdept            FROM  Student            WHERE  Student.Sno = SC.Sno        );</code></pre><h3 id="3-删除数据-–DELETE"><a href="#3-删除数据-–DELETE" class="headerlink" title="3. 删除数据 –DELETE"></a>3. 删除数据 –DELETE</h3><p><strong>三种删除方式</strong><br>    删除某一个元组的值<br>    删除多个元组的值<br>    带子查询的删除语句</p><p>【例】删出学号为 200215128 的学生。</p><pre><code class="hljs">DELETEFROM StudentWHERE Sno= &#39;200215128&#39;;</code></pre><p>【例】删除所有的学生选课记录。</p><pre><code class="hljs">    DELETE    FROM SC；/</code></pre><p>【例】删除计算机科学系所有学生的选课记录。</p><pre><code class="hljs">DELETEFROM SCWHERE  &#39;CS&#39;=(               SELECT Sdept               FROM Student               WHERE Student.Sno=SC.Sno           );</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2. SQL 数据查询</title>
    <link href="/2024/07/05/sql%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/07/05/sql%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="1-SELECT-语句一般格式"><a href="#1-SELECT-语句一般格式" class="headerlink" title="1. SELECT 语句一般格式"></a>1. SELECT 语句一般格式</h3><p>语句格式：</p><pre><code class="hljs">SELECT [ALL|DISTINCT]       &lt;目标列表达式&gt; [别名] [,&lt;目标列表达式&gt; [别名]] …FROM   &lt;表名或视图名&gt; [别名] [ ,&lt;表名或视图名&gt; [别名]] …    [WHERE &lt;条件表达式&gt;]    [GROUP  BY&lt;列名1&gt; [HAVING &lt;条件表达式&gt;]]    [ORDER BY &lt;列名2&gt; [ASC|DESC]</code></pre><h3 id="2-单表查询"><a href="#2-单表查询" class="headerlink" title="2. 单表查询"></a>2. 单表查询</h3><p>** 功能 ： ** 对一个表的内容进行查询</p><h4 id="2-1-选择表中的若干列"><a href="#2-1-选择表中的若干列" class="headerlink" title="2.1. 选择表中的若干列"></a>2.1. 选择表中的若干列</h4><p><strong>（1）查询指定列</strong></p><p>** 格式  ：** 在SELECT 后面指定列名，FROM后面指定列所在的表名。</p><p>【例】查询全体学生的学号与姓名。</p><pre><code class="hljs">SELECT Sno,SnameFROM Student;</code></pre><p>【例】查询全体学生的姓名、学号、所在系。</p><pre><code class="hljs">SELECT Sname,Sno,SdeptFROM Student;</code></pre><p><strong>（2）查询全部列</strong></p><p>** 功能：**选出表中所有属性列。</p><p>** 格式：*<em>在SELECT关键字后面列出所有列名或将&lt;目标列表达式&gt;指定为</em>。</p><p>【例】查询全体学生的详细记录。</p><pre><code class="hljs">SELECT  Sno,Sname,Ssex,Sage,SdeptFROM Student;//两种方式SELECT  *FROM Student;</code></pre><p><strong>（3）查询经过计算的值</strong></p><p>** 功能：**选出表中指定的属性列，并经过计算后输出。</p><p>** 格式：**在SELECT子句的&lt;目标列表达式&gt;可以为：</p><ul><li>算数表达式</li><li>字符串常量</li><li>函数</li><li>列别名</li></ul><p>【例】 查全体学生的姓名及其出生年份。这里假定目前年份是2004年。</p><pre><code class="hljs">SELECT Sname,2004-SageFROM Student;</code></pre><table><thead><tr><th>Sname</th><th>2004-Sage</th></tr></thead><tbody><tr><td>李永</td><td>1984</td></tr><tr><td>刘成</td><td>1985</td></tr><tr><td>张力</td><td>1986</td></tr></tbody></table><p>【例】查询全体学生的姓名、出生年份和所有系，要求用小写字母表示所有系名，这里假定目前年份是2004年。</p><pre><code class="hljs"> SELECT Sname,&#39;Year of Birth: &#39;, 2004-Sage, LOWER(Sdept) FROM Student;</code></pre><table><thead><tr><th>Sname</th><th>Year of Birth:</th><th>(1)</th><th>(2)</th></tr></thead><tbody><tr><td>李永</td><td>Year of Birth:</td><td>1984</td><td>cs</td></tr><tr><td>刘成</td><td>Year of Birth:</td><td>1985</td><td>ma</td></tr><tr><td>张力</td><td>Year of Birth:</td><td>1986</td><td>is</td></tr></tbody></table><p>【例】使用列别名改变查询结果的列标题。</p><pre><code class="hljs">SELECT  Sname NAME, &#39;Year of Birth: &#39; BIRTH, 2000-Sage  BIRTHDAY, LOWER(Sdept)  DEPARTMENTFROM  Student;</code></pre><table><thead><tr><th>NAME</th><th>BIRTH</th><th>BIRTHDAY</th><th>DEPARTMENT</th></tr></thead><tbody><tr><td>李永</td><td>Year of Birth:</td><td>1984</td><td>cs</td></tr><tr><td>刘成</td><td>Year of Birth:</td><td>1985</td><td>ma</td></tr><tr><td>张力</td><td>Year of Birth:</td><td>1986</td><td>is</td></tr></tbody></table><p>####2.2. 选择表中的若干元组（行）</p><p><strong>（1）关键词 DISTINCT 消除取值重复的行，若没有指定DISTINCT关键词，则缺省为ALL。</strong></p><p>【例】查询选修了课程的学生学号。</p><pre><code class="hljs">SELECT Sno FROM SC;/*等价于：*/SELECT ALL  Sno  FROM SC;</code></pre><table><thead><tr><th>Sno</th></tr></thead><tbody><tr><td>201215121</td></tr><tr><td>201215121</td></tr><tr><td>201215122</td></tr></tbody></table><p>【例】查询选修了课程的学生学号。指定DISTINCT关键词，去掉表中重复的行。</p><pre><code class="hljs">SELECT DISTINCT SnoFROM SC;</code></pre><table><thead><tr><th>Sno</th></tr></thead><tbody><tr><td>201215121</td></tr><tr><td>201215122</td></tr></tbody></table><p><strong>（2）查询满足条件的元组（行）</strong></p><table><thead><tr><th>查询条件</th><th>谓词</th></tr></thead><tbody><tr><td>比较</td><td>&#x3D;，&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,!&#x3D;,&lt;&gt;,!&gt;,!&lt;;NOT+上述比较运算符</td></tr><tr><td>确定范围</td><td>BETWEEN AND,NOT BETWEEN AND</td></tr><tr><td>确定集合</td><td>IN,NOT IN</td></tr><tr><td>字符匹配</td><td>LIKE,NOT LIKE</td></tr><tr><td>空值</td><td>IS NULL,IS NOT NULL</td></tr><tr><td>多次条件（逻辑运算）</td><td>AND,OR,NOT</td></tr></tbody></table><p>a. 比较</p><p>【例】查询计算机科学系全体学生的名单。</p><pre><code class="hljs">SELECT SnameFROM StudentWHERE Sdept=&#39;CS&#39;;</code></pre><p>【例】查询所有年龄在20岁以下的学生姓名及其年龄。</p><pre><code class="hljs">SELECT Sname,SageFROM StudentWHERE Sage &lt; 20;</code></pre><p>b. 确定范围</p><p>【例】查询年龄在20~23岁（包括20岁和23岁）之间的学生的姓名，系和年龄。</p><pre><code class="hljs">SELECT Sname,Sdept,SageFROM  StudentWHERE Sage NOT BETWEEN 20 AND 23;</code></pre><p>【例】查询年龄不在20~23岁之间的学生姓名、系别和年龄。</p><pre><code class="hljs">SELECT Sname,Sdept,SageFROM  StudentWHERE Sage NOT BETWEEN 20 AND 23;</code></pre><p>c. 确定集合</p><p>【例】查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</p><pre><code class="hljs">SELECT Sname,SsexFROM  StudentWHERE Sdept IN ( &#39;IS&#39;,&#39;MA&#39;,&#39;CS&#39; );</code></pre><p>【例】查询既不是信息系、数学系，也不是计算机科学系的学生的姓名和性别。</p><pre><code class="hljs">SELECT Sname,SsexFROM StudentWHERE Sdept NOT IN ( &#39;IS&#39;,&#39;MA&#39;,&#39;CS&#39; );</code></pre><p>d. 字符匹配</p><p>** 【注意】&nbsp;% &nbsp;表示任意长度的字符, &nbsp; _ &nbsp;** 表示一个字符。</p><p>【例】查询学号为201215121的学生的详细情况。</p><pre><code class="hljs">SELECT *FROM  StudentWHERE  Sno LIKE &#39;201215121&#39;;/*等价于：*/SELECT  *FROM  StudentWHERE Sno = &#39;201215121&#39;;</code></pre><p>【例】查询所有姓刘学生的姓名、学号和性别。</p><pre><code class="hljs">SELECT Sname,Sno,SsexFROM StudentWHERE  Sname LIKE &#39;刘%&#39;;</code></pre><p>【例】查询姓”欧阳”且全名为三个汉字的学生的姓名。</p><pre><code class="hljs">SELECT SnameFROM   StudentWHERE  Sname LIKE &#39;欧阳_&#39;;</code></pre><p>** 【注意】使用换码字符’’将通配符转义为普通字符**</p><ul><li>ESCAPE ‘＼’ 表示“ ＼” 为换码字符</li></ul><p>【例】查询DB_Design课程的课程号和学分。</p><pre><code class="hljs">SELECT Cno,CcreditFROM CourseWHERE Cname LIKE &#39;DB\_Design&#39; ESCAPE &#39;\&#39;;</code></pre><p><strong>【注意】 这里使用ESCAPE ‘ &#39; 表示其中的’_’并不是占位符，而是实际存在的符号。</strong></p><p>e. 空值</p><p>【例】某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。</p><pre><code class="hljs">SELECT Sno,CnoFROM  SCWHERE  Grade IS NULL;</code></pre><p>【例】查所有有成绩的学生学号和课程号。</p><pre><code class="hljs">SELECT Sno,CnoFROM  SCWHERE  Grade IS NOT NULL;</code></pre><p>f. 多重条件（逻辑运算）</p><p>** 逻辑运算符**</p><ul><li>AND和 OR来联结多个查询条件</li><li>AND的优先级高于OR</li><li>可以用括号改变优先级</li></ul><p>【例】 查询计算机系年龄在20岁以下的学生姓名。</p><pre><code class="hljs">SELECT SnameFROM  StudentWHERE Sdept= &#39;CS&#39; AND Sage&lt;20;</code></pre><p>【例】查询信息系（IS）、数学系（MA）和计算机科学系（CS）学生的姓名和性别。</p><pre><code class="hljs">SELECT Sname,SsexFROM StudentWHERE Sdept IN ( &#39;IS&#39;,&#39;MA&#39;,&#39;CS&#39; );/*可改写为：*/SELECT Sname,SsexFROM   StudentWHERE  Sdept= &#39;IS&#39; OR Sdept= &#39;MA&#39; OR Sdept= &#39;CS&#39;;</code></pre><h4 id="2-3-ORDER-BY-子句"><a href="#2-3-ORDER-BY-子句" class="headerlink" title="2.3. ORDER BY 子句"></a>2.3. ORDER BY 子句</h4><p>可以按一个或多个属性列排序：</p><ul><li>升序：ASC；</li><li>降序：DESC；</li><li>缺省值为升序；</li></ul><p>当排序列含空值时：（空值默认为最大值）</p><ul><li>ASC：排序列为空值的元组最后显示</li><li>DESC：排序列为空值的元组最先显示</li></ul><p>【例】查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</p><pre><code class="hljs">SELECT Sno,GradeFROM  SCWHERE  Cno= &#39;3&#39;ORDER BY Grade DESC;</code></pre><p>【例】 查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列。</p><pre><code class="hljs">SELECT  *FROM  StudentORDER BY Sdept,Sage DESC;</code></pre><h4 id="2-4-聚合函数"><a href="#2-4-聚合函数" class="headerlink" title="2.4. 聚合函数"></a>2.4. 聚合函数</h4><ul><li>计数<br>  COUNT（[DISTINCT|ALL] *）<br>  COUNT（[DISTINCT|ALL] &lt;列名&gt;）</li><li>计算总和<br>  SUM（[DISTINCT|ALL] &lt;列名&gt;）</li><li>计算平均值<br>  AVG（[DISTINCT|ALL] &lt;列名&gt;）</li><li>最大最小值<br>  MAX（[DISTINCT|ALL] &lt;列名&gt;）<br>  MIN（[DISTINCT|ALL] &lt;列名&gt;）</li></ul><p>【注意】DISTINCT 代表去掉重复。</p><p>【例】查询学生总人数。</p><pre><code class="hljs">SELECT COUNT(*)FROM  Student;</code></pre><p>【例】查询选修了课程的学生人数。</p><pre><code class="hljs">SELECT COUNT(DISTINCT Sno)FROM SC;</code></pre><p>【例】计算2号课程的学生平均成绩。</p><pre><code class="hljs">SELECT AVG(Grade)FROM SCWHERE Cno= &#39;2&#39;;</code></pre><p>【例】查询学生201215121选修课程的总学分数。</p><pre><code class="hljs">SELECT SUM(Ccredit)FROM  SC, CourseWHERE Sno=&#39;201215121&#39; AND SC.Cno=Course.Cno;</code></pre><h4 id="2-5-GROUP-BY子句"><a href="#2-5-GROUP-BY子句" class="headerlink" title="2.5. GROUP BY子句"></a>2.5. GROUP BY子句</h4><p>** GROUP BY子句分组： 细化聚集函数的作用对象**</p><ul><li>未对查询结果分组，聚集函数将作用于整个查询结果</li><li>对查询结果分组后，聚集函数将分别作用于每个组</li><li>作用对象是查询的中间结果表</li><li>按指定的一列或多列值分组，值相等的为一组</li></ul><p>** HAVING短语与WHERE子句的区别：**</p><ul><li>作用对象不同</li><li>WHERE子句作用于基表或视图，从中选择满足条件的元组</li><li>HAVING短语作用于组，从中选择满足条件的组。</li></ul><p>【例】求各个课程号及相应的选课人数。</p><pre><code class="hljs">SELECT Cno,COUNT(Sno)FROM    SCGROUP BY Cno;</code></pre><p>【例】查询选修了2门以上课程的学生学号。</p><pre><code class="hljs">SELECT SnoFROM  SCGROUP BY SnoHAVING  COUNT(*) &gt;2;</code></pre><h3 id="3-连接查询"><a href="#3-连接查询" class="headerlink" title="3. 连接查询"></a>3. 连接查询</h3><p>** 连接查询：同时涉及多个表的查询**</p><p>**连接条件或连接谓词：用来连接两个表的条件 **</p><p>** 连接条件一般格式：**</p><ul><li>[&lt;表名1&gt;.]&lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.]&lt;列名2&gt;</li><li>[&lt;表名1&gt;.]&lt;列名1&gt; BETWEEN [&lt;表名2&gt;.]&lt;列名2&gt; AND [&lt;表名2&gt;.]&lt;列名3&gt;</li></ul><p>** （1）等值与非等值连接查询 **</p><p>** a. 等值连接**</p><p>【例】 查询每个学生及其选修课程的情况。</p><pre><code class="hljs">SELECT  Student.*,SC.*FROM     Student,SCWHERE  Student.Sno = SC.Sno;</code></pre><p>** b. 自然连接：等值连接中去掉目标列中重复的属性列称为自然连接。**</p><p>【例】对上例用自然连接完成。</p><pre><code class="hljs">SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,GradeFROM     Student,SCWHERE  Student.Sno = SC.Sno;</code></pre><p>** c. 自身连接**</p><ul><li>自身连接：一个表与其自己进行连接</li><li>需要给表起别名以示区别</li><li>由于所有属性名都是同名属性，因此必须使用别名前缀</li></ul><p>【例】查询每一门课的间接先修课（即先修课的先修课）</p><pre><code class="hljs">SELECT  FIRST.Cno,SECOND.CpnoFROM  Course  FIRST,Course  SECONDWHERE FIRST.Cpno = SECOND.Cno;</code></pre><p>**d. 外连接 **</p><p>** 普通连接与外连接的区别：**普通连接操作值输出满足连接条件的元组。</p><p>** 外连接：** 操作以指定表为连接主体，将主题表中不满足连接条件的元组一并输出。</p><ul><li><p>左外连接：LEFT OUT JOIN SC ON</p><pre><code class="hljs">  关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</code></pre></li><li><p>右外连接：RIGHT OUT JOIN SC ON</p><pre><code class="hljs">  关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</code></pre></li></ul><p>[例]查询每个学生及其选修课程的情况。</p><pre><code class="hljs">SELECT Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,CcreditFROM  SC LEFT JOIN Course ON (SC.Cno=Course.Cno);/*LEFT JOIN 与 LEFT OUTER JOIN结果相同*/SELECT Sno,SC.Cno,Grade,Course.Cno,Cname,Cpno,CcreditFROM  SC LEFT OUTER JOIN Course ON (SC.Cno=Course.Cno);</code></pre><p>** e. 多表连接**</p><p>【例】查询每个学生的学号、姓名、选修的课程名及成绩。</p><pre><code class="hljs">SELECT Student.Sno,Sname,Cname,GradeFROM    Student,SC,Course  /*多表连接*/WHERE Student.Sno = SC.Snoand SC.Cno = Course.Cno;</code></pre><p>** f. 嵌套查询**</p><ul><li>一个SELECT-FROM-WHERE语句称为一个查询块。</li><li>将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。</li></ul><p>【例】</p><pre><code class="hljs"> SELECT Sname/*外层查询/父查询*/ FROM Student WHERE Sno IN(SELECT Sno    /*内层查询/子查询*/ FROM SC WHERE Cno= &#39;2&#39;);</code></pre><p>** 带有IN谓词的子查询**</p><p>【例】查询与“刘晨”在同一个系学习的学生。此查询要求可以分步来完成。</p><pre><code class="hljs">SELECT Sno,Sname,SdeptFROM StudentWHERE Sdept  IN(SELECT SdeptFROM StudentWHERE Sname= &#39;刘晨&#39;);</code></pre><p>【例】查询选修了课程名为“信息系统”的学生学号和姓名。</p><pre><code class="hljs">SELECT Sno,Sname /*③ 最后在Student关系中取出Sno和Sname*/FROM    StudentWHERE Sno  IN(  SELECT Sno  /*② 然后在SC关系中找出选修了3号课程的学生学号*/ FROM    SC WHERE  Cno IN    ( SELECT Cno   /*① 首先在Course关系中找出 “信息系统”的课程号,为3号*/      FROM Course      WHERE Cname= &#39;信息系统&#39; ));</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1. SQL概述</title>
    <link href="/2024/07/05/sql%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89/"/>
    <url>/2024/07/05/sql%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><h2 id="基本表的定义，删除与修改"><a href="#基本表的定义，删除与修改" class="headerlink" title="基本表的定义，删除与修改"></a>基本表的定义，删除与修改</h2><h3 id="1-定义基本表"><a href="#1-定义基本表" class="headerlink" title="1. 定义基本表"></a>1. 定义基本表</h3><p>语句格式：</p><pre><code class="hljs">CREATE TABLE &lt;表名&gt;    ( &lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]    [，&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;]]………    [，&lt;表级完整性约束条件&gt; ]    );</code></pre><p>【说明】如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。</p><p>【例】建立“学生表”Student，学号是主码，姓名取值唯一</p><pre><code class="hljs">CREATE TABLE Student    (Sno CHAR(9)PRIMARY KEY,    /*列级完整性约束条件，Sno为主码*/     Sname CHAR(20)UNIQE,     /*Sname 取值唯一*/     Ssex CHAR(2),     Sage SMALLINT,     Sdept CHAR(20)    );</code></pre><p>【例】建立一个“课程表“Course</p><pre><code class="hljs">CREATE TABLE Course    (Cno  CHAR(4) PRIMARY KEY,     Cname CHAR(40),     Cpno CHAR(4),     /*先修课*/     Ccerdit SMALLINT,     FOREIGN KEY(Cpno)References Course(Cno)     /*设置Cpno为外键，被参照表是Course，被参照列是Cno*/    );</code></pre><p>【例】建立一个”学生选课”表 SC</p><pre><code class="hljs">CREATE TABLE SC    (Sno CHAR(9),     Cno CHAR(4),     Grade SMALLINT,     PRIMARY KEY (Sno,Cno),     /*主码由两个属性构成,必须作为表级完整性进行定义*/     Foreign KEY(Sno) REFERENCES Student(Sno),     /*表级完整性约束条件，Sno为外码，被参照表是Student*/     Foreign KEY(Cno) REFERENCES Student(Cno)     /*表级完整性约束条件，Cno为外码，被参照表是Course*/    );</code></pre><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p><img src="/.%5C%E2%80%AApics%5C20200331204116766.png" alt="数据类型" title="数据类型"></p><h3 id="3-修改基本表"><a href="#3-修改基本表" class="headerlink" title="3. 修改基本表"></a>3. 修改基本表</h3><p>语句格式：</p><pre><code class="hljs">    ALTER TABLE &lt;表名&gt;    [ADD [COLUMN]&lt;新列名&gt; &lt;数据类型&gt; [完整性约束]]    [ADD &lt;表级完整性约束&gt;]    [DROP [COLUMN]&lt;列名&gt; [CASCADE|RESTRIC]]    [DROP CONSTRAINT&lt;完整性约束&gt;[CASCADE|RESTRIC]]    [ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt;];</code></pre><p>【说明】</p><ul><li><p>DROP COLUMN 子句用于删除表中的列。</p><ul><li>指定了CASCADE（级联）短语，自动删除引用该列的其他对象。</li><li>指定了RESTRIC（限制）短语，若该列被其他对象所引用，则将拒绝删除该列。</li></ul></li><li><p>DROP CONSTRAINT 子句用于删除指定的完整性约束条件。</p></li><li><p>ALTER COLUMN 子句用于修改原有的列的定义，包括修改列名和列的数据类型。</p></li></ul><p>【例】向Student表增加“入学时间”列，其数据类型为日期型。</p><pre><code class="hljs">ALTER TABLE Student ADD S_entrance Date;/*不论基本表中原来是否已有数据，新增加的列数据都为Null*/</code></pre><p>【例】将年龄的数据类型由字符型该为整数。</p><pre><code class="hljs">ALTER TABLE Student ALTER COLUMN Sage INT;</code></pre><p>【例】增加课程每次必须取唯一值的约束条件。</p><pre><code class="hljs">ALTER TABLE Course ADD UNIQUE (Cname);</code></pre><h3 id="4-删除基本表"><a href="#4-删除基本表" class="headerlink" title="4. 删除基本表"></a>4. 删除基本表</h3><p>语句格式：</p><pre><code class="hljs">DROP TABLE &lt;表名&gt;[RESTRICT|CASCADE];</code></pre><p>【例】删除Student表</p><pre><code class="hljs">DROP TABLE Student CASCADE;</code></pre><p>【说明】</p><ul><li><p>RESTRICT：删除表是有限制的。</p><ul><li>欲删除的基本表不能被其他表的约束所引用。</li><li>如果存在依赖该表的对象，则此表不能被删除。</li></ul></li><li><p>CASCADE：删除该表没有限制。</p><ul><li>在删除基本表的同时，相关的依赖对象一起删除。</li></ul></li><li><p>基本表定义被删除，数据被删除，表上建立的索引，视图，触发器等也将被删除。</p></li></ul><h3 id="5-索引的建立与删除–INDEX"><a href="#5-索引的建立与删除–INDEX" class="headerlink" title="5. 索引的建立与删除–INDEX"></a>5. 索引的建立与删除–INDEX</h3><p>** 建立索引的目的 **：加快查询速度。</p><p>** 谁可以建立索引？**</p><ul><li>DBA 或 表的属主（即建立表的人）</li><li>DBMS一般会自动建立以下列上的索引</li><li>PRIMARY KEY</li><li>UNIQUE</li></ul><p>** 谁维护索引？**</p><ul><li>DBMS自动完成。</li></ul><p>** 1. 使用索引 **</p><ul><li>DBMS自动选择是否使用索引以及使用哪些索引</li></ul><p>【例】为学生-课程数据库中的Student,Course,SC三个表建立索引。</p><pre><code class="hljs">CREATE UNIQUE INDEX Stusno ON Student(Sno);CREATE UNIQUE INDEX Coucno ON Course(Cno);CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC);</code></pre><p>Student 表按学号升序建唯一索引。<br>Course 表按课程号升序建唯一索引。<br>SC 表按学号升序和课程号降序建唯一索引。</p><p>** 2. 删除索引 **</p><p>语句格式：</p><pre><code class="hljs">DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;;DROP INDEX &lt;表名&gt;.&lt;索引名&gt;;</code></pre><p>删除索引时，系统会从数据字典中删去有关该索引的描述。</p><p>【例】删除Student表的Stusname索引</p><pre><code class="hljs">DROP INDEX Stusno ON Student;或DROP INDEX Student.Stusno;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My first blog</title>
    <link href="/2024/04/25/firstpage/"/>
    <url>/2024/04/25/firstpage/</url>
    
    <content type="html"><![CDATA[<img src="/2024/04/25/firstpage/001.jpg" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/25/hello-world/"/>
    <url>/2024/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
